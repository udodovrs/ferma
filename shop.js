const { updatePartPlayer } = require("./controller/player");
const goods = require("./constants/goods");
//const player = require("./DB/players/1700241193.json");

const getKeyboardGoods = (player) => {
  const close = ["‚ùå  –ó–∞–∫—Ä—ã—Ç—å"];
  const filtredGoods = goods.filter((item) => item.level <= player.level);
  const lastIndex = filtredGoods.length;
  let keyboard = [];

  if (lastIndex % 2 === 0) {
    for (let i = 0; i < lastIndex; i += 2) {
      keyboard.push([
        `${filtredGoods[i].name} - ${filtredGoods[i].costBuy}`,
        `${filtredGoods[i + 1].name} - ${filtredGoods[i + 1].costBuy}`,
      ]);
    }
    return (keyboard = [...keyboard, close]);
  } else {
    for (let i = 0; i < lastIndex - 1; i += 2) {
      keyboard.push([
        `${filtredGoods[i].name} - ${filtredGoods[i].costBuy}`,
        `${filtredGoods[i + 1].name} - ${filtredGoods[i + 1].costBuy}`,
      ]);
    }

    const latest = [
      `${filtredGoods[lastIndex - 1].name} - ${
        filtredGoods[lastIndex - 1].costBuy
      }`,
    ];
    return (keyboard = [...keyboard, latest, close]);
  }
};



const addResource = async (data, player) => {
  const splitdData = data.split("-");
  const nameResource = splitdData[0].trim();
  const valueResource = Number(splitdData[1].trim());

  if (player.money >= valueResource) {
    const chengedStorage = {
      ...player.storage,
      [nameResource]: player.storage[nameResource]
        ? player.storage[nameResource] + 10
        : 10,
    };
    await updatePartPlayer(player.id, {
      storage: chengedStorage,
      money: player.money - valueResource,
    });
    return `${nameResource} - 10—à—Ç —É–∂–µ –≤ –≤–∞—à–µ–π –∫–ª–∞–¥–æ–≤–æ–π`;
  } else {
    return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∞—á–Ω–æ –¥–µ–Ω–µ–≥";
  }
};

const addSeeds = async (data, player) => {
  const splitdData = data.split("-");
  const nameResource = splitdData[0].trim();
  const valueResource = Number(splitdData[1].trim());

  if (player.money >= valueResource) {
    const chengedSeeds = {
      ...player.seeds,
      [nameResource]: player.seeds[nameResource]
        ? player.seeds[nameResource] + 10
        : 10,
    };
    await updatePartPlayer(player.id, {
      seeds: chengedSeeds,
      money: player.money - valueResource,
    });
    return `${nameResource} - 10—à—Ç —É–∂–µ –≤ –≤–∞—à–µ–π –∫–ª–∞–¥–æ–≤–æ–π`;
  } else {
    return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∞—á–Ω–æ –¥–µ–Ω–µ–≥";
  }
};

const buySomething = async (data, player) => {

  switch (data) {
    case "–ö–ª—É–±–Ω–∏–∫–∞ - 100":
      return await addResource("–ö–ª—É–±–Ω–∏–∫–∞ - 100", player);
    case "–ú–∞–ª–∏–Ω–∞ - 30":
      return await addResource("–ú–∞–ª–∏–Ω–∞ - 30", player);
    case "–û–≥—É—Ä—Ü—ã - 90":
      return await addResource("–û–≥—É—Ä—Ü—ã - 90", player);
    case "–û–≤—ë—Å - 10":
      return await addResource("–û–≤—ë—Å - 10", player);
    case "–ö–ª–µ–≤–µ—Ä - 90":
      return await addResource("–ö–ª–µ–≤–µ—Ä - 90", player);
    case "ü•î–°–µ–º–µ–Ω–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è - 20":
      return await addSeeds("ü•î–°–µ–º–µ–Ω–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è - 20", player);
    case "üçÖ–°–µ–º–µ–Ω–∞ –ø–æ–º–∏–¥–æ—Ä - 30":
      return await addSeeds("üçÖ–°–µ–º–µ–Ω–∞ –ø–æ–º–∏–¥–æ—Ä - 30", player);
    case "ü•í–°–µ–º–µ–Ω–∞ –æ–≥—É—Ä—Ü–æ–≤ - 20":
      return await addSeeds("ü•í–°–µ–º–µ–Ω–∞ –æ–≥—É—Ä—Ü–æ–≤ - 20", player);
    case "üçÜ–°–µ–º–µ–Ω–∞ –±–∞–∫–ª–∞–∂–∞–Ω - 20":
      return await addSeeds("üçÜ–°–µ–º–µ–Ω–∞ –±–∞–∫–ª–∞–∂–∞–Ω - 20", player);
    case "ü•¶–°–µ–º–µ–Ω–∞–ë—Ä–æ–∫–∫–æ–ª–∏ - 20":
      return await addSeeds("ü•¶–°–µ–º–µ–Ω–∞–ë—Ä–æ–∫–∫–æ–ª–∏ - 20", player);
    case "ü•ï–°–µ–º–µ–Ω–∞ –º–æ—Ä–∫–æ–≤–∏ - 10":
      return await addSeeds("ü•ï–°–µ–º–µ–Ω–∞ –º–æ—Ä–∫–æ–≤–∏ - 10", player);
    case "üßÖ–°–µ–º–µ–Ω–∞ –ª—É–∫–∞ - 20":
      return await addSeeds("üßÖ–°–µ–º–µ–Ω–∞ –ª—É–∫–∞ - 20", player);
    case "üå∂Ô∏è–°–µ–º–µ–Ω–∞ –ø–µ—Ä–µ—Ü–∞ - 20":
      return await addSeeds("üå∂Ô∏è–°–µ–º–µ–Ω–∞ –ø–µ—Ä–µ—Ü–∞ - 20", player);
    default:
      return false;
  }
};

module.exports = {
  buySomething,
  getKeyboardGoods
};


//console.log(getKeyboardGoods(player))